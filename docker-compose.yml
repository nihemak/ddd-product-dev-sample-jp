version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:3000" # Map host port 8080 to container port 3000 (Check backend Dockerfile/main.rs for actual port)
    volumes:
      # Mount the entire backend directory for full sync
      - ./backend:/usr/src/app
      # Exclude the target directory to avoid build conflicts
      - /usr/src/app/target
    environment:
      # Ensure Rust backtraces are enabled for easier debugging
      - RUST_BACKTRACE=1
      # Database connection URL (adjust user/password/db name as needed)
      # Uses the 'db' service name as the host
      - DATABASE_URL=postgres://app_user:password123@db:5432/app_db
      # Add any other environment variables your backend needs
      # - MY_OTHER_VAR=some_value
    depends_on:
      db:
        condition: service_healthy # Wait for db to be healthy
    # Add healthcheck if needed
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000" # Map host port 3000 to container port 3000
    volumes:
      # Mount the source code, excluding node_modules and .next
      - ./frontend:/app
      # Use named volumes for node_modules and .next build cache
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
    environment:
      - NODE_ENV=development
      # Required for Next.js hot reloading to work properly with Docker
      - WATCHPACK_POLLING=true
    # The default command is likely `npm run dev` from the Dockerfile
    # No need to specify command here unless overriding
    depends_on:
      - backend # Optional: if frontend needs backend API during development startup

  # Add a new service for Storybook
  storybook:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "6006:6006" # Expose Storybook port
    volumes:
      # Mount the source code, excluding node_modules (built into the image)
      - ./frontend:/app
      # Use the same named volume as the frontend service
      - frontend_node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      # WATCHPACK_POLLING might not be strictly necessary but doesn't hurt
      - WATCHPACK_POLLING=true
    # Specify the command to run Storybook using npx
    command: npx storybook dev --no-open --port 6006

  db:
    image: postgres:16-alpine # Use a specific version
    ports:
      # Optionally expose the DB port to the host for direct access/debugging
      - "5432:5432"
    volumes:
      # Persist database data using a named volume
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=app_user
      - POSTGRES_PASSWORD=password123
      - POSTGRES_DB=app_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  # Define the named volumes
  postgres_data:
  frontend_node_modules:
  frontend_next: 