name: Rust CI

on:
  push:
    branches: [ "main" ]
    paths: # Trigger only when backend code or the workflow itself changes
      - '.github/workflows/ci.yml'
      - 'backend/**'
  pull_request:
    branches: [ "main" ]
    paths: # Trigger only when backend code or the workflow itself changes
      - '.github/workflows/ci.yml'
      - 'backend/**'

env:
  CARGO_TERM_COLOR: always
  # Define cache key prefix for easier invalidation if needed
  CACHE_PREFIX: v1

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: Cache cargo registry and index
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ env.CACHE_PREFIX }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-${{ env.CACHE_PREFIX }}-

      - name: Cache cargo build target directory
        uses: actions/cache@v4
        with:
          # Cache target directory relative to backend
          path: backend/target
          key: ${{ runner.os }}-cargo-build-${{ env.CACHE_PREFIX }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ env.CACHE_PREFIX }}-

      - name: Install sqlx-cli
        # Run only if not cached in ~/.cargo/bin/
        # Consider caching sqlx-cli binary specifically if installation is slow
        run: |
          cargo install sqlx-cli \
            --version=0.7.4 \
            --features native-tls,postgres \
            --no-default-features \
            --locked

      - name: Check formatting
        run: cargo fmt --check
        working-directory: ./backend

      - name: Run Clippy
        run: cargo clippy -- -D warnings
        working-directory: ./backend

      - name: Check SQLx query cache
        run: cargo sqlx prepare --check --workspace
        working-directory: ./backend

      - name: Run tests
        # Build steps will leverage cached target directory if possible
        run: cargo test
        working-directory: ./backend 