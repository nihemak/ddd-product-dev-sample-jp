---
description: DDD Sample Projectの概要と構造
globs: ["**/*.rs"]
alwaysApply: true
---
# プロジェクト概要: DDD サンプル (Rustバックエンド & Next.jsフロントエンド)

このプロジェクトは、ドメイン駆動設計 (DDD) の原則と軽量なプロダクト開発プロセスを組み合わせたサンプルアプリケーションです。「記念日プレゼント予約・配送サービス」を題材としています。

## 主要なアーキテクチャ特徴:

*   **バックエンド (`backend/`)**: Rust で実装され、`axum`, `tokio`, `sqlx` (PostgreSQL), `utoipa` (OpenAPI) を使用しています。詳細は [README.md](mdc:README.md) を参照してください。
*   **フロントエンド (`frontend/`)**: Next.js (React + TypeScript) で実装されています。詳細は [frontend/README.md](mdc:frontend/README.md) を参照してください。
*   **ドメイン駆動設計 (DDD)**: エンティティ、値オブジェクト、集約、リポジトリといった概念を適用しています。
*   **オニオンアーキテクチャ**: Domain, Application, Infrastructure 層に分離し、依存関係は内側に向かいます。詳細は [docs/architecture/overview.md](mdc:docs/architecture/overview.md) および [ADR 0001](mdc:docs/architecture/adr/0001-use-onion-architecture.md) を参照してください。
*   **日本語ユビキタス言語**: ドメイン層の型名や関数名に日本語（またはローマ字）を積極的に使用しています。詳細は [docs/domain/ubiquitous-language.md](mdc:docs/domain/ubiquitous-language.md) を参照してください。
*   **関数型スタイル & ROP**: ドメインロジックは純粋関数を重視し、エラー処理には `Result` と Railway Oriented Programming (ROP) を活用します。
*   **SPA + API**: システムはバックエンドAPIを利用するシングルページアプリケーション (SPA) 構成です。詳細は [ADR 0005](mdc:docs/architecture/adr/0005-adopt-spa-api-architecture.md) を参照してください。
*   **Docker開発環境**: 開発環境全体 (バックエンド, フロントエンド, DB) は Docker Compose で管理されます。詳細は [docker-compose.yml](mdc:docker-compose.yml) および [ADR 0015](mdc:docs/architecture/adr/0015-adopt-docker-for-development-environment.md) を参照してください。
*   **デプロイ**: バックエンド/DB は Render、フロントエンドは Vercel へのデプロイを想定しています。詳細は [ADR 0008](mdc:docs/architecture/adr/0008-adopt-render-vercel-as-platform.md) を参照してください。

より包括的な詳細については、ルートの [README.md](mdc:README.md) および [プロダクト開発ガイドライン](mdc:docs/PRODUCT_DEVELOPMENT_GUIDE.md) を参照してください。

## プロジェクトの目的
- DDDの実践的な理解と学習
- クリーンアーキテクチャ（特にオニオンアーキテクチャ）の実装例
- Rustにおける関数型プログラミングとROPの活用例
- Rustでの実践的なアプリケーション開発の例示

## 主要コンポーネント (バックエンド)
- `domain.rs`: ドメインモデル、ビジネスロジック、リポジトリインターフェース（トレイト） ([backend/src/domain.rs](mdc:backend/src/domain.rs))
- `application.rs`: ユースケースの実装（ドメイン層のオーケストレーション） ([backend/src/application.rs](mdc:backend/src/application.rs))
- `infrastructure.rs`: 永続化層の実装（リポジトリトレイトの実装） ([backend/src/infrastructure.rs](mdc:backend/src/infrastructure.rs))
- `main.rs`: アプリケーションのエントリーポイント、依存性注入（DI） ([backend/src/main.rs](mdc:backend/src/main.rs))
- `lib.rs`: ライブラリクレートのエントリーポイント、モジュール宣言 ([backend/src/lib.rs](mdc:backend/src/lib.rs))

## バックエンド開発環境
- Rust 2021 edition
- 標準的なRustツールチェーン（cargo, rustc）
- テストフレームワーク（標準の`#[test]`）
- モックライブラリ（`mockall`）

## バックエンドプロジェクト構造
```
backend/src/
├── [domain.rs](mdc:backend/src/domain.rs)       # Domain層のコードとテスト
├── [application.rs](mdc:backend/src/application.rs)  # Application層のコードとテスト
├── [infrastructure.rs](mdc:backend/src/infrastructure.rs) # Infrastructure層のコード
├── [main.rs](mdc:backend/src/main.rs)         # アプリケーションのエントリーポイント (バイナリクレート)
└── [lib.rs](mdc:backend/src/lib.rs)          # ライブラリクレートのエントリーポイント、モジュール宣言
```

## 実行方法
プロジェクトのルートディレクトリで以下のコマンドを実行します。
```bash
cargo run
``` 
