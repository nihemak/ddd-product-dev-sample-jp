---
description: DDD Sample Projectの概要と構造
globs: ["**/*.rs"]
alwaysApply: true
---
# DDD Sample Project 概要

このプロジェクトは、ドメイン駆動設計（DDD）の原則に基づき、Rustを用いて実装されたサンプルアプリケーションです。
以下の特徴を持っています：

*   **関数型スタイル**: ドメインロジックは副作用を極力排した純粋関数として実装されています。
*   **Railway Oriented Programming (ROP)**: `Result` 型と `and_then`, `map_err` などを活用し、エラー処理を含むワークフローを直線的に記述しています。
*   **オニオンアーキテクチャ**: 関心事を Domain, Application, Infrastructure の層に分離し、依存関係は常に外側から内側（Infrastructure → Application → Domain）へ向かいます。
*   **依存性の逆転**: Application層はDomain層で定義されたリポジトリのインターフェース（トレイト）に依存し、具体的な実装（Infrastructure層）は起動時に注入されます。
*   **日本語ユビキタス言語**: ドメイン層の型名や関数名には、日本語（またはそのローマ字表記）を積極的に採用しています（例: `注文`, `商品ID`, `注文を受け付ける`, `mark_as_preparing`）。

## プロジェクトの目的
- DDDの実践的な理解と学習
- クリーンアーキテクチャ（特にオニオンアーキテクチャ）の実装例
- Rustにおける関数型プログラミングとROPの活用例
- Rustでの実践的なアプリケーション開発の例示

## 主要コンポーネント
- `domain.rs`: ドメインモデル、ビジネスロジック、リポジトリインターフェース（トレイト）
- `application.rs`: ユースケースの実装（ドメイン層のオーケストレーション）
- `infrastructure.rs`: 永続化層の実装（リポジトリトレイトの実装）
- `main.rs`: アプリケーションのエントリーポイント、依存性注入（DI）
- `lib.rs`: ライブラリクレートのエントリーポイント、モジュール宣言

## 開発環境
- Rust 2021 edition
- 標準的なRustツールチェーン（cargo, rustc）
- テストフレームワーク（標準の`#[test]`）
- モックライブラリ（`mockall`）

## プロジェクト構造

```
src/
├── domain.rs       # Domain層のコードとテスト
├── application.rs  # Application層のコードとテスト
├── infrastructure.rs # Infrastructure層のコード
├── main.rs         # アプリケーションのエントリーポイント (バイナリクレート)
└── lib.rs          # ライブラリクレートのエントリーポイント、モジュール宣言
```

## 実行方法
プロジェクトのルートディレクトリで以下のコマンドを実行します。
```bash
cargo run
``` 
