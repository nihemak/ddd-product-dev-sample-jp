---
description: 
globs: 
alwaysApply: false
---
# 開発ワークフロー

このプロジェクトでは、Docker Compose を使用して開発環境を管理します。

## セットアップ

1.  Docker と Docker Compose がインストールされていることを確認してください。
2.  `.env.sample` を `.env` にコピーし、必要に応じて `DATABASE_URL` を設定します。
    ```bash
    cp .env.sample .env
    ```

## アプリケーションの実行

Docker Compose を使用して、すべてのサービス（バックエンド、フロントエンド、データベース）をビルドして実行します。

```bash
docker compose up -d --build
```

*   フロントエンドは `http://localhost:3000` で利用可能になります。
*   バックエンドAPIドキュメント (Swagger) は `http://localhost:8080/swagger-ui/` で利用可能になります。

## ホットリロード

*   **バックエンド**: `backend/src` 内の変更は、コンテナ内の `cargo watch` によって自動的に再ビルド・再起動されます。
*   **フロントエンド**: `frontend/src` 内の変更は、Next.js のホットモジュールリプレイスメント (HMR) によって即座に反映されます。

## テストの実行 (バックエンド)

実行中のバックエンドコンテナ内でテストを実行します。

```bash
docker compose exec backend cargo test
```

## ログの表示

```bash
docker compose logs -f <サービス名>  # 例: frontend, backend, db
```

## サービスの停止

```bash
docker compose down
```

詳細はルートの [README.md](mdc:README.md) を参照してください。
