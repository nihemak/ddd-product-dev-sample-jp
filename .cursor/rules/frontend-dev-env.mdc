---
description: 
globs: 
alwaysApply: false
---
# フロントエンド開発環境 (Next.js + Docker)

このプロジェクトのフロントエンド ([frontend/](mdc:frontend)) は Next.js (React + TypeScript) で構築されています。

## 主要技術スタック

*   Framework: [Next.js](mdc:https:/nextjs.org) (App Router)
*   Language: [TypeScript](mdc:https:/www.typescriptlang.org)
*   Styling: [Tailwind CSS](mdc:https:/tailwindcss.com)
*   Linting/Formatting: ESLint, Prettier
*   Package Manager: npm
*   UI Components: Storybook ([http://localhost:6006](mdc:http:/localhost:6006)) で開発・確認可能

## Docker 開発環境 (推奨)

開発は Docker Compose ([docker-compose.yml](mdc:docker-compose.yml)) を使用してコンテナ化された環境で行うことを **強く推奨** します (ADR 0015)。

*   **起動コマンド:** プロジェクトルートで以下を実行します。
    ```bash
    # フロントエンドとStorybookを起動
    docker compose up -d frontend storybook
    ```
*   **アクセス:**
    *   Next.js アプリ: [http://localhost:3000](mdc:http:/localhost:3000)
    *   Storybook: [http://localhost:6006](mdc:http:/localhost:6006)
*   **ホットリロード:** 有効です (`./frontend:/app` ボリュームマウントと `WATCHPACK_POLLING=true` による)。
*   **停止:** `docker compose down`

## Docker 設定のポイント

*   **Dockerfile ([frontend/Dockerfile](mdc:frontend/Dockerfile))**:
    *   マルチステージビルドを採用し、最終イメージサイズを最適化。
    *   依存関係のインストールには `npm ci` を使用し、ビルドの再現性を確保。
*   **Docker Compose ([docker-compose.yml](mdc:docker-compose.yml))**:
    *   `frontend_node_modules` という名前付きボリュームを `frontend` と `storybook` サービスで共有。これにより、ホストの `node_modules` とのコンフリクトを防ぎ、依存関係を効率的に管理。
    *   `frontend_next` で Next.js のビルドキャッシュを永続化。
*   **Docker Ignore ([frontend/.dockerignore](mdc:frontend/.dockerignore))**:
    *   `node_modules`, `.next` などをビルドコンテキストから除外し、ビルド効率を向上。

詳細な手順やローカル環境でのセットアップについては [frontend/README.md](mdc:frontend/README.md) を参照してください。

## フロントエンドディレクトリ構成 (主要部分)
```
frontend/
├── public/
├── src/
│   ├── app/             # Next.js App Router (ルーティング、ページ、レイアウト)
│   ├── components/      # 再利用可能なUIコンポーネント
│   ├── lib/
│   └── styles/
├── .dockerignore
├── Dockerfile
├── next.config.mjs
├── package.json
└── tsconfig.json
```

## フロントエンドテスト

フロントエンドのテスト戦略と導入ツールについては、以下のドキュメントを参照してください。

*   **テスト戦略の全体像と各テストの役割:**
    *   ユニット/コンポーネントテスト戦略: [ADR 0020: フロントエンドのユニットテスト戦略・ツールの選定](mdc:docs/architecture/adr/0020-use-vitest-rtl-storybook-for-frontend-unit-testing.md)
    *   E2Eテスト戦略: [ADR 0021: フロントエンドのE2Eテスト戦略・ツールの選定](mdc:docs/architecture/adr/0021-use-playwright-for-frontend-e2e-testing.md)
*   **テストの実行方法、設定ファイル、具体的なコマンド例:**
    *   [frontend/README.md の「テスト」セクション](mdc:frontend/README.md#テスト)
*   **主要なテストツールの設定ファイル:**
    *   Vitest (ユニット/コンポーネントテスト):
        *   `frontend/vitest.config.ts`
        *   `frontend/vitest.setup.ts` (グローバルセットアップ)
    *   Playwright (E2Eテスト):
        *   `frontend/playwright.config.ts`
*   **Playwright のセットアップに関する詳細な経緯や課題:**
    *   [docs/technical_tasks.md 内の関連タスク](mdc:docs/technical_tasks.md#feat-testing-フロントエンドテストツール-vitest-rtl-storybook-interaction-tests-playwright-の導入と初期テスト作成) (特に `feat(frontend): Playwright をセットアップし...` の項目)

これらのドキュメントを参照することで、フロントエンドのテストに関する最新情報や決定事項、具体的な設定内容を把握できます。
