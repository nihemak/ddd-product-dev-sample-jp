---
description: 
globs: 
alwaysApply: false
---
# バックエンドアーキテクチャ (Rust - オニオンアーキテクチャ)

バックエンドはオニオンアーキテクチャパターンに従い、関心事を明確なレイヤーに分離しています。

## レイヤーと主要ファイル:

*   **ドメイン層 (`[backend/src/domain.rs](mdc:backend/src/domain.rs)`)**
    *   コアとなるビジネスロジック、エンティティ、値オブジェクト、ドメインイベント、リポジトリの*トレイト* (インターフェース) を含みます。
    *   命名には**日本語ユビキタス言語**を使用します。
    *   他のレイヤーへの**依存関係はありません**。
*   **アプリケーション層 (`[backend/src/application.rs](mdc:backend/src/application.rs)`)**
    *   アプリケーションのユースケース (ワークフロー) を実装します。
    *   ドメインオブジェクトとロジックを調整します。
    *   ドメイン層のインターフェース (リポジトリトレイト) に依存します。
    *   アプリケーション固有のエラー (`ApplicationError`) を定義します。
*   **インフラストラクチャ層 (`[backend/src/infrastructure.rs](mdc:backend/src/infrastructure.rs)`)**
    *   ドメイン層で定義されたインターフェースの具象実装を提供します (例: `PgRepository` が `プレゼント予約Repository` を実装)。
    *   データベースアクセス (`sqlx` を使用)、外部 API 呼び出しなどの外部に関わる詳細を扱います。
    *   アプリケーション層とドメイン層に依存します。
*   **エントリーポイント / API (`[backend/src/main.rs](mdc:backend/src/main.rs)`)**
    *   Web サーバー (`axum`) をセットアップします。
    *   依存性注入 (DI) を行います: インフラストラクチャコンポーネント (DB プール、リポジトリなど) を作成し、アプリケーション層に注入します。
    *   API ルートを定義し、アプリケーションサービスのハンドラーにマッピングします。
    *   リクエスト/レスポンスのシリアライズ/デシリアライズを処理します。
    *   OpenAPI ドキュメント (`utoipa`) を設定します。

## 依存関係ルール:

依存関係は厳密に内側に向かいます: `インフラストラクチャ -> アプリケーション -> ドメイン`。

詳細は `[docs/architecture/overview.md](mdc:docs/architecture/overview.md)` を参照してください。
