---
description:         プロジェクトのCI/CDパイプライン構成、ビルド、テスト、デプロイメントのプロセス、および関連ツールに関する情報。
globs: 
alwaysApply: false
---
# CI/CD と開発プロセス

## CI/CD (GitHub Actions)

*   **ワークフロー定義:** [`.github/workflows/ci.yml`](mdc:.github/workflows/ci.yml)
*   **トリガー:** `main` ブランチへの `push` または `pull_request` 時 (ただし `backend/` またはワークフロー自体の変更時のみ)。
*   **主要ステップ:**
    1.  Rust ツールチェイン設定 (`stable`, `clippy`, `rustfmt`)
    2.  キャッシュ復元 (cargo registry/index, cargo build target, sqlx-cli)
    3.  `sqlx-cli` インストール (`--force` 付きで常に実行)
    4.  フォーマットチェック (`cargo fmt --check`)
    5.  Lint チェック (`cargo clippy -- -D warnings`)
    6.  SQLx クエリチェック (`cargo sqlx prepare --check --workspace`)
    7.  テスト実行 (`cargo test`)
*   **キャッシュ戦略:**
    *   `cargo registry/index`: `Cargo.lock` ベース。
    *   `cargo build target`: `Cargo.lock` ベース。
    *   `sqlx-cli`: バージョン (`0.7.4`) ベース。
