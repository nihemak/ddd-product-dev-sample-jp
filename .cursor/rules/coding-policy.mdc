---
description: DDD Sample Projectのコーディング規約
globs: ["**/*.rs"]
alwaysApply: true
---
# コーディングポリシー

このルールは、プロジェクトの主要なコーディング標準とプラクティスを概説します。

## 言語とスタイル

*   **Rust (バックエンド)**: Rust 2021 edition を使用します。標準フォーマット (`cargo fmt`) に従います。変数名はスネークケース、型名はキャメルケースを使用します。
*   **TypeScript (フロントエンド)**: Next.js のデフォルトに従います。ESLint と Prettier をリンティングとフォーマットに使用します (`npm run lint`, `npm run format`)。詳細は [frontend/README.md](mdc:frontend/README.md) を参照してください。
*   **日本語ユビキタス言語**: **ドメイン層** (`backend/src/domain.rs`) の型名や関数名には、日本語（またはローマ字）を積極的に使用します。

## アーキテクチャ

*   **オニオンアーキテクチャ**: Domain, Application, Infrastructure 層間の厳密な分離を維持します。依存関係は必ず内側に向かうようにします (Infra -> App -> Domain)。Domain 層は他の層に依存しません。
*   **依存性の逆転**: Application 層は Domain 層で定義されたインターフェース (Trait) に依存します。Infrastructure 層がこれらの Trait を実装します。

## エラーハンドリング (バックエンド)

*   `Result` 型（Application/Infrastructure 層では `anyhow::Result` を使用することが多い）と Railway Oriented Programming (ROP) の原則を活用します。
*   `DomainError` や `ApplicationError` のような具体的なエラー型を使用します。
*   エラーメッセージは日本語で記述します。

## テスト

*   各モジュール内に `#[cfg(test)] mod tests { ... }` を配置します。
*   **Domain層テスト**: 純粋なロジックの検証に焦点を当てます。
*   **Application層テスト**: モック（例: リポジトリトレイトに対する `mockall`）を使用してユースケースをテストします。詳細は [ADR 0002](mdc:docs/architecture/adr/0002-use-mockall-for-testing.md) を参照してください。
*   **テスト記述**: テストケースの説明は日本語で記述します。
*   **テスト実行**: `docker compose exec backend cargo test` を使用します。

## コミット

*   **Conventional Commits** 仕様に従います。
*   **件名 (Subject) は必ず日本語で記述します。**
*   例: `feat(注文): 注文キャンセル機能を追加`

詳細なガイドラインについては、完全版の [プロダクト開発ガイドライン](mdc:docs/PRODUCT_DEVELOPMENT_GUIDE.md) を参照してください。
